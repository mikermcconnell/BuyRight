'use client';\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport {\n  PlayIcon,\n  PauseIcon,\n  StopIcon,\n  EyeIcon,\n  ClockIcon,\n  UserIcon,\n  DocumentTextIcon,\n  ChartBarIcon,\n  ExclamationTriangleIcon,\n  CheckCircleIcon,\n} from '@heroicons/react/24/outline';\n\n// User Flow Recorder\ninterface UserAction {\n  id: string;\n  type: 'click' | 'scroll' | 'input' | 'navigation' | 'form_submit' | 'error';\n  timestamp: number;\n  element?: string;\n  value?: string;\n  path: string;\n  coordinates?: { x: number; y: number };\n}\n\ninterface UserFlowRecorderProps {\n  isRecording: boolean;\n  onStartRecording: () => void;\n  onStopRecording: (actions: UserAction[]) => void;\n  onPauseRecording: () => void;\n}\n\nexport function UserFlowRecorder({\n  isRecording,\n  onStartRecording,\n  onStopRecording,\n  onPauseRecording,\n}: UserFlowRecorderProps) {\n  const [actions, setActions] = useState<UserAction[]>([]);\n  const [isPaused, setIsPaused] = useState(false);\n  const [duration, setDuration] = useState(0);\n  const startTimeRef = useRef<number>(0);\n  const intervalRef = useRef<NodeJS.Timeout | null>(null);\n\n  useEffect(() => {\n    if (isRecording && !isPaused) {\n      startTimeRef.current = Date.now();\n      \n      // Start duration timer\n      intervalRef.current = setInterval(() => {\n        setDuration(Date.now() - startTimeRef.current);\n      }, 1000);\n\n      // Event listeners for user actions\n      const handleClick = (e: MouseEvent) => {\n        const target = e.target as HTMLElement;\n        const action: UserAction = {\n          id: `action-${Date.now()}-${Math.random()}`,\n          type: 'click',\n          timestamp: Date.now() - startTimeRef.current,\n          element: target.tagName + (target.id ? `#${target.id}` : '') + (target.className ? `.${target.className.split(' ')[0]}` : ''),\n          path: window.location.pathname,\n          coordinates: { x: e.clientX, y: e.clientY },\n        };\n        setActions(prev => [...prev, action]);\n      };\n\n      const handleScroll = () => {\n        const action: UserAction = {\n          id: `action-${Date.now()}-${Math.random()}`,\n          type: 'scroll',\n          timestamp: Date.now() - startTimeRef.current,\n          path: window.location.pathname,\n          value: `${window.scrollY}`,\n        };\n        setActions(prev => [...prev, action]);\n      };\n\n      const handleInput = (e: Event) => {\n        const target = e.target as HTMLInputElement;\n        const action: UserAction = {\n          id: `action-${Date.now()}-${Math.random()}`,\n          type: 'input',\n          timestamp: Date.now() - startTimeRef.current,\n          element: target.name || target.id || target.type,\n          value: target.type === 'password' ? '[HIDDEN]' : target.value,\n          path: window.location.pathname,\n        };\n        setActions(prev => [...prev, action]);\n      };\n\n      // Add event listeners\n      document.addEventListener('click', handleClick);\n      document.addEventListener('scroll', handleScroll, { passive: true });\n      document.addEventListener('input', handleInput);\n\n      return () => {\n        document.removeEventListener('click', handleClick);\n        document.removeEventListener('scroll', handleScroll);\n        document.removeEventListener('input', handleInput);\n        if (intervalRef.current) {\n          clearInterval(intervalRef.current);\n        }\n      };\n    } else if (intervalRef.current) {\n      clearInterval(intervalRef.current);\n    }\n  }, [isRecording, isPaused]);\n\n  const handleStart = () => {\n    setActions([]);\n    setDuration(0);\n    setIsPaused(false);\n    onStartRecording();\n  };\n\n  const handlePause = () => {\n    setIsPaused(!isPaused);\n    onPauseRecording();\n  };\n\n  const handleStop = () => {\n    onStopRecording(actions);\n    setActions([]);\n    setDuration(0);\n    setIsPaused(false);\n    if (intervalRef.current) {\n      clearInterval(intervalRef.current);\n    }\n  };\n\n  const formatDuration = (ms: number) => {\n    const seconds = Math.floor(ms / 1000);\n    const minutes = Math.floor(seconds / 60);\n    return `${minutes}:${(seconds % 60).toString().padStart(2, '0')}`;\n  };\n\n  return (\n    <motion.div\n      className=\"fixed top-4 left-4 z-50 bg-white rounded-xl shadow-lg border border-gray-200 p-4\"\n      initial={{ opacity: 0, scale: 0.8 }}\n      animate={{ opacity: 1, scale: 1 }}\n      transition={{ duration: 0.3 }}\n    >\n      <div className=\"flex items-center space-x-3\">\n        <div className=\"flex items-center space-x-2\">\n          {!isRecording ? (\n            <button\n              onClick={handleStart}\n              className=\"flex items-center space-x-1 bg-red-500 text-white px-3 py-2 rounded-lg hover:bg-red-600 transition-colors\"\n            >\n              <PlayIcon className=\"w-4 h-4\" />\n              <span className=\"text-sm font-medium\">Record</span>\n            </button>\n          ) : (\n            <>\n              <button\n                onClick={handlePause}\n                className=\"flex items-center space-x-1 bg-yellow-500 text-white px-3 py-2 rounded-lg hover:bg-yellow-600 transition-colors\"\n              >\n                {isPaused ? <PlayIcon className=\"w-4 h-4\" /> : <PauseIcon className=\"w-4 h-4\" />}\n                <span className=\"text-sm font-medium\">{isPaused ? 'Resume' : 'Pause'}</span>\n              </button>\n              <button\n                onClick={handleStop}\n                className=\"flex items-center space-x-1 bg-gray-500 text-white px-3 py-2 rounded-lg hover:bg-gray-600 transition-colors\"\n              >\n                <StopIcon className=\"w-4 h-4\" />\n                <span className=\"text-sm font-medium\">Stop</span>\n              </button>\n            </>\n          )}\n        </div>\n        \n        {isRecording && (\n          <div className=\"flex items-center space-x-3 text-sm text-gray-600\">\n            <div className=\"flex items-center space-x-1\">\n              <ClockIcon className=\"w-4 h-4\" />\n              <span>{formatDuration(duration)}</span>\n            </div>\n            <div className=\"flex items-center space-x-1\">\n              <UserIcon className=\"w-4 h-4\" />\n              <span>{actions.length} actions</span>\n            </div>\n            {isPaused && (\n              <motion.div\n                className=\"text-yellow-600 font-medium\"\n                animate={{ opacity: [1, 0.5, 1] }}\n                transition={{ duration: 1, repeat: Infinity }}\n              >\n                PAUSED\n              </motion.div>\n            )}\n            {!isPaused && (\n              <motion.div\n                className=\"w-2 h-2 bg-red-500 rounded-full\"\n                animate={{ opacity: [1, 0.3, 1] }}\n                transition={{ duration: 1, repeat: Infinity }}\n              />\n            )}\n          </div>\n        )}\n      </div>\n    </motion.div>\n  );\n}\n\n// User Flow Analyzer\ninterface FlowAnalysis {\n  totalDuration: number;\n  totalActions: number;\n  clicksPerMinute: number;\n  scrollEvents: number;\n  formInteractions: number;\n  pageViews: number;\n  errorEvents: number;\n  mostInteractedElements: Array<{ element: string; count: number }>;\n  timeSpentPerPage: Array<{ path: string; duration: number }>;\n}\n\ninterface UserFlowAnalyzerProps {\n  actions: UserAction[];\n  className?: string;\n}\n\nexport function UserFlowAnalyzer({ actions, className = '' }: UserFlowAnalyzerProps) {\n  const analysis = React.useMemo((): FlowAnalysis => {\n    if (!actions.length) {\n      return {\n        totalDuration: 0,\n        totalActions: 0,\n        clicksPerMinute: 0,\n        scrollEvents: 0,\n        formInteractions: 0,\n        pageViews: 0,\n        errorEvents: 0,\n        mostInteractedElements: [],\n        timeSpentPerPage: [],\n      };\n    }\n\n    const totalDuration = Math.max(...actions.map(a => a.timestamp));\n    const totalActions = actions.length;\n    const clicksPerMinute = (actions.filter(a => a.type === 'click').length / (totalDuration / 60000)) || 0;\n    const scrollEvents = actions.filter(a => a.type === 'scroll').length;\n    const formInteractions = actions.filter(a => a.type === 'input' || a.type === 'form_submit').length;\n    const pageViews = new Set(actions.map(a => a.path)).size;\n    const errorEvents = actions.filter(a => a.type === 'error').length;\n\n    // Most interacted elements\n    const elementCounts: { [key: string]: number } = {};\n    actions.forEach(action => {\n      if (action.element) {\n        elementCounts[action.element] = (elementCounts[action.element] || 0) + 1;\n      }\n    });\n    const mostInteractedElements = Object.entries(elementCounts)\n      .sort(([,a], [,b]) => b - a)\n      .slice(0, 5)\n      .map(([element, count]) => ({ element, count }));\n\n    // Time spent per page\n    const pageTimes: { [key: string]: number[] } = {};\n    actions.forEach(action => {\n      if (!pageTimes[action.path]) {\n        pageTimes[action.path] = [];\n      }\n      pageTimes[action.path].push(action.timestamp);\n    });\n    \n    const timeSpentPerPage = Object.entries(pageTimes)\n      .map(([path, timestamps]) => ({\n        path,\n        duration: Math.max(...timestamps) - Math.min(...timestamps)\n      }))\n      .sort((a, b) => b.duration - a.duration);\n\n    return {\n      totalDuration,\n      totalActions,\n      clicksPerMinute,\n      scrollEvents,\n      formInteractions,\n      pageViews,\n      errorEvents,\n      mostInteractedElements,\n      timeSpentPerPage,\n    };\n  }, [actions]);\n\n  const formatDuration = (ms: number) => {\n    const seconds = Math.floor(ms / 1000);\n    const minutes = Math.floor(seconds / 60);\n    if (minutes > 0) {\n      return `${minutes}m ${seconds % 60}s`;\n    }\n    return `${seconds}s`;\n  };\n\n  if (!actions.length) {\n    return (\n      <div className={`bg-gray-50 rounded-xl p-8 text-center ${className}`}>\n        <DocumentTextIcon className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n        <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No User Flow Data</h3>\n        <p className=\"text-gray-600\">Start recording to analyze user interactions</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className={`space-y-6 ${className}`}>\n      <div className=\"bg-white rounded-xl p-6 shadow-sm border border-gray-200\">\n        <h3 className=\"text-lg font-semibold text-gray-900 mb-4 flex items-center\">\n          <ChartBarIcon className=\"w-5 h-5 mr-2 text-blue-600\" />\n          Flow Analysis Summary\n        </h3>\n        \n        <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n          <div className=\"text-center p-4 bg-blue-50 rounded-lg\">\n            <div className=\"text-2xl font-bold text-blue-600\">\n              {formatDuration(analysis.totalDuration)}\n            </div>\n            <div className=\"text-sm text-blue-800 font-medium\">Total Duration</div>\n          </div>\n          \n          <div className=\"text-center p-4 bg-green-50 rounded-lg\">\n            <div className=\"text-2xl font-bold text-green-600\">\n              {analysis.totalActions}\n            </div>\n            <div className=\"text-sm text-green-800 font-medium\">Total Actions</div>\n          </div>\n          \n          <div className=\"text-center p-4 bg-purple-50 rounded-lg\">\n            <div className=\"text-2xl font-bold text-purple-600\">\n              {analysis.clicksPerMinute.toFixed(1)}\n            </div>\n            <div className=\"text-sm text-purple-800 font-medium\">Clicks/Minute</div>\n          </div>\n          \n          <div className=\"text-center p-4 bg-orange-50 rounded-lg\">\n            <div className=\"text-2xl font-bold text-orange-600\">\n              {analysis.pageViews}\n            </div>\n            <div className=\"text-sm text-orange-800 font-medium\">Page Views</div>\n          </div>\n        </div>\n        \n        {analysis.errorEvents > 0 && (\n          <div className=\"mt-4 p-4 bg-red-50 border border-red-200 rounded-lg flex items-center\">\n            <ExclamationTriangleIcon className=\"w-5 h-5 text-red-500 mr-2\" />\n            <span className=\"text-sm text-red-800\">\n              {analysis.errorEvents} error event{analysis.errorEvents !== 1 ? 's' : ''} detected\n            </span>\n          </div>\n        )}\n      </div>\n      \n      {/* Most Interacted Elements */}\n      <div className=\"bg-white rounded-xl p-6 shadow-sm border border-gray-200\">\n        <h4 className=\"font-semibold text-gray-900 mb-4\">Most Interacted Elements</h4>\n        <div className=\"space-y-3\">\n          {analysis.mostInteractedElements.map((item, index) => (\n            <div key={index} className=\"flex items-center justify-between py-2 px-3 bg-gray-50 rounded-lg\">\n              <span className=\"text-sm font-mono text-gray-700 truncate\">\n                {item.element}\n              </span>\n              <span className=\"text-sm font-semibold text-gray-900 ml-2\">\n                {item.count} interactions\n              </span>\n            </div>\n          ))}\n        </div>\n      </div>\n      \n      {/* Time Spent Per Page */}\n      <div className=\"bg-white rounded-xl p-6 shadow-sm border border-gray-200\">\n        <h4 className=\"font-semibold text-gray-900 mb-4\">Time Spent Per Page</h4>\n        <div className=\"space-y-3\">\n          {analysis.timeSpentPerPage.slice(0, 5).map((page, index) => (\n            <div key={index} className=\"flex items-center justify-between py-2 px-3 bg-gray-50 rounded-lg\">\n              <span className=\"text-sm text-gray-700 truncate\">\n                {page.path || '/'}\n              </span>\n              <span className=\"text-sm font-semibold text-gray-900 ml-2\">\n                {formatDuration(page.duration)}\n              </span>\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n}\n\n// A/B Test Results Component\ninterface ABTestResultsProps {\n  testName: string;\n  variantA: {\n    name: string;\n    conversions: number;\n    visitors: number;\n    conversionRate: number;\n  };\n  variantB: {\n    name: string;\n    conversions: number;\n    visitors: number;\n    conversionRate: number;\n  };\n  confidence: number;\n  winner?: 'A' | 'B' | 'inconclusive';\n  className?: string;\n}\n\nexport function ABTestResults({\n  testName,\n  variantA,\n  variantB,\n  confidence,\n  winner,\n  className = '',\n}: ABTestResultsProps) {\n  const improvement = ((variantB.conversionRate - variantA.conversionRate) / variantA.conversionRate) * 100;\n  \n  return (\n    <div className={`bg-white rounded-xl p-6 shadow-sm border border-gray-200 ${className}`}>\n      <div className=\"flex items-center justify-between mb-6\">\n        <h3 className=\"text-lg font-semibold text-gray-900\">\n          A/B Test: {testName}\n        </h3>\n        <div className={`px-3 py-1 rounded-full text-sm font-medium ${\n          winner === 'A' ? 'bg-green-100 text-green-800' :\n          winner === 'B' ? 'bg-blue-100 text-blue-800' :\n          'bg-yellow-100 text-yellow-800'\n        }`}>\n          {winner === 'A' ? 'Variant A Wins' :\n           winner === 'B' ? 'Variant B Wins' :\n           'Inconclusive'}\n        </div>\n      </div>\n      \n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n        {/* Variant A */}\n        <div className={`p-4 rounded-lg border-2 ${\n          winner === 'A' ? 'border-green-300 bg-green-50' : 'border-gray-200 bg-gray-50'\n        }`}>\n          <div className=\"flex items-center justify-between mb-3\">\n            <h4 className=\"font-semibold text-gray-900\">{variantA.name}</h4>\n            {winner === 'A' && (\n              <CheckCircleIcon className=\"w-5 h-5 text-green-600\" />\n            )}\n          </div>\n          <div className=\"space-y-2\">\n            <div className=\"flex justify-between\">\n              <span className=\"text-sm text-gray-600\">Visitors:</span>\n              <span className=\"text-sm font-medium\">{variantA.visitors.toLocaleString()}</span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span className=\"text-sm text-gray-600\">Conversions:</span>\n              <span className=\"text-sm font-medium\">{variantA.conversions.toLocaleString()}</span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span className=\"text-sm text-gray-600\">Conversion Rate:</span>\n              <span className=\"text-lg font-bold text-gray-900\">\n                {variantA.conversionRate.toFixed(2)}%\n              </span>\n            </div>\n          </div>\n        </div>\n        \n        {/* Variant B */}\n        <div className={`p-4 rounded-lg border-2 ${\n          winner === 'B' ? 'border-blue-300 bg-blue-50' : 'border-gray-200 bg-gray-50'\n        }`}>\n          <div className=\"flex items-center justify-between mb-3\">\n            <h4 className=\"font-semibold text-gray-900\">{variantB.name}</h4>\n            {winner === 'B' && (\n              <CheckCircleIcon className=\"w-5 h-5 text-blue-600\" />\n            )}\n          </div>\n          <div className=\"space-y-2\">\n            <div className=\"flex justify-between\">\n              <span className=\"text-sm text-gray-600\">Visitors:</span>\n              <span className=\"text-sm font-medium\">{variantB.visitors.toLocaleString()}</span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span className=\"text-sm text-gray-600\">Conversions:</span>\n              <span className=\"text-sm font-medium\">{variantB.conversions.toLocaleString()}</span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span className=\"text-sm text-gray-600\">Conversion Rate:</span>\n              <span className=\"text-lg font-bold text-gray-900\">\n                {variantB.conversionRate.toFixed(2)}%\n              </span>\n            </div>\n          </div>\n        </div>\n      </div>\n      \n      {/* Statistical Significance */}\n      <div className=\"mt-6 p-4 bg-gray-50 rounded-lg\">\n        <div className=\"flex items-center justify-between mb-2\">\n          <span className=\"text-sm font-medium text-gray-700\">Statistical Confidence:</span>\n          <span className={`text-sm font-bold ${\n            confidence >= 95 ? 'text-green-600' :\n            confidence >= 90 ? 'text-yellow-600' :\n            'text-red-600'\n          }`}>\n            {confidence.toFixed(1)}%\n          </span>\n        </div>\n        \n        {improvement !== 0 && (\n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-sm font-medium text-gray-700\">Improvement:</span>\n            <span className={`text-sm font-bold ${\n              improvement > 0 ? 'text-green-600' : 'text-red-600'\n            }`}>\n              {improvement > 0 ? '+' : ''}{improvement.toFixed(2)}%\n            </span>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\n// User Testing Dashboard\nexport function UserTestingDashboard() {\n  const [isRecording, setIsRecording] = useState(false);\n  const [recordedFlows, setRecordedFlows] = useState<UserAction[]>([]);\n  \n  const handleStartRecording = () => {\n    setIsRecording(true);\n  };\n  \n  const handleStopRecording = (actions: UserAction[]) => {\n    setIsRecording(false);\n    setRecordedFlows(actions);\n  };\n  \n  const handlePauseRecording = () => {\n    // Pause logic handled in the recorder component\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 p-6\">\n      <div className=\"max-w-7xl mx-auto\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">\n            User Testing Dashboard\n          </h1>\n          <p className=\"text-gray-600\">\n            Record and analyze user interactions to optimize the user experience\n          </p>\n        </div>\n        \n        <UserFlowRecorder\n          isRecording={isRecording}\n          onStartRecording={handleStartRecording}\n          onStopRecording={handleStopRecording}\n          onPauseRecording={handlePauseRecording}\n        />\n        \n        <UserFlowAnalyzer \n          actions={recordedFlows}\n          className=\"mt-8\"\n        />\n        \n        {/* Example A/B Test Results */}\n        <div className=\"mt-8\">\n          <ABTestResults\n            testName=\"Landing Page CTA Button\"\n            variantA={{\n              name: 'Original (Blue Button)',\n              conversions: 145,\n              visitors: 2840,\n              conversionRate: 5.11,\n            }}\n            variantB={{\n              name: 'Variant (Green Button)',\n              conversions: 167,\n              visitors: 2856,\n              conversionRate: 5.85,\n            }}\n            confidence={94.2}\n            winner=\"B\"\n          />\n        </div>\n      </div>\n    </div>\n  );\n}"