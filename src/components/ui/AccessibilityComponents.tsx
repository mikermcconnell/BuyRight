'use client';\n\nimport React, { useState, useRef, useEffect, useCallback } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport {\n  SpeakerWaveIcon,\n  SpeakerXMarkIcon,\n  EyeIcon,\n  EyeSlashIcon,\n  PlusIcon,\n  MinusIcon,\n  ArrowUpIcon,\n} from '@heroicons/react/24/outline';\n\n// Skip to Content Link\nexport function SkipToContent() {\n  return (\n    <a\n      href=\"#main-content\"\n      className=\"\n        sr-only focus:not-sr-only focus:absolute focus:top-4 focus:left-4 \n        bg-primary-600 text-white px-4 py-2 rounded-lg font-semibold\n        z-[9999] transition-all duration-200\n        focus:ring-4 focus:ring-primary-200\n      \"\n    >\n      Skip to main content\n    </a>\n  );\n}\n\n// Accessible Modal/Dialog\ninterface AccessibleModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  title: string;\n  children: React.ReactNode;\n  size?: 'sm' | 'md' | 'lg' | 'xl';\n  closeOnOverlayClick?: boolean;\n  closeOnEscapeKey?: boolean;\n}\n\nexport function AccessibleModal({\n  isOpen,\n  onClose,\n  title,\n  children,\n  size = 'md',\n  closeOnOverlayClick = true,\n  closeOnEscapeKey = true,\n}: AccessibleModalProps) {\n  const modalRef = useRef<HTMLDivElement>(null);\n  const previouslyFocusedElement = useRef<HTMLElement | null>(null);\n  const firstFocusableElement = useRef<HTMLElement | null>(null);\n  const lastFocusableElement = useRef<HTMLElement | null>(null);\n\n  const sizes = {\n    sm: 'max-w-md',\n    md: 'max-w-lg',\n    lg: 'max-w-2xl',\n    xl: 'max-w-4xl',\n  };\n\n  // Focus management\n  useEffect(() => {\n    if (isOpen) {\n      previouslyFocusedElement.current = document.activeElement as HTMLElement;\n      \n      // Find focusable elements\n      const focusableElements = modalRef.current?.querySelectorAll(\n        'button, [href], input, select, textarea, [tabindex]:not([tabindex=\"-1\"])'\n      );\n      \n      if (focusableElements && focusableElements.length > 0) {\n        firstFocusableElement.current = focusableElements[0] as HTMLElement;\n        lastFocusableElement.current = focusableElements[focusableElements.length - 1] as HTMLElement;\n        firstFocusableElement.current?.focus();\n      }\n    } else {\n      previouslyFocusedElement.current?.focus();\n    }\n  }, [isOpen]);\n\n  // Escape key handler\n  useEffect(() => {\n    const handleEscapeKey = (event: KeyboardEvent) => {\n      if (event.key === 'Escape' && closeOnEscapeKey) {\n        onClose();\n      }\n    };\n\n    if (isOpen) {\n      document.addEventListener('keydown', handleEscapeKey);\n    }\n\n    return () => {\n      document.removeEventListener('keydown', handleEscapeKey);\n    };\n  }, [isOpen, onClose, closeOnEscapeKey]);\n\n  // Tab trap\n  const handleTabKey = (event: KeyboardEvent) => {\n    if (event.key !== 'Tab') return;\n\n    if (event.shiftKey) {\n      if (document.activeElement === firstFocusableElement.current) {\n        event.preventDefault();\n        lastFocusableElement.current?.focus();\n      }\n    } else {\n      if (document.activeElement === lastFocusableElement.current) {\n        event.preventDefault();\n        firstFocusableElement.current?.focus();\n      }\n    }\n  };\n\n  const handleOverlayClick = (event: React.MouseEvent) => {\n    if (event.target === event.currentTarget && closeOnOverlayClick) {\n      onClose();\n    }\n  };\n\n  return (\n    <AnimatePresence>\n      {isOpen && (\n        <>\n          {/* Overlay */}\n          <motion.div\n            className=\"fixed inset-0 bg-black/50 backdrop-blur-sm z-[100]\"\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            exit={{ opacity: 0 }}\n            onClick={handleOverlayClick}\n            aria-hidden=\"true\"\n          />\n          \n          {/* Modal */}\n          <div className=\"fixed inset-0 z-[101] flex items-center justify-center p-4\">\n            <motion.div\n              ref={modalRef}\n              className={`\n                bg-white rounded-2xl shadow-2xl w-full ${sizes[size]}\n                max-h-[90vh] overflow-auto\n              `}\n              initial={{ opacity: 0, scale: 0.95, y: 20 }}\n              animate={{ opacity: 1, scale: 1, y: 0 }}\n              exit={{ opacity: 0, scale: 0.95, y: 20 }}\n              role=\"dialog\"\n              aria-modal=\"true\"\n              aria-labelledby=\"modal-title\"\n              onKeyDown={handleTabKey as any}\n            >\n              <div className=\"p-6\">\n                <h2 id=\"modal-title\" className=\"text-xl font-semibold text-gray-900 mb-4\">\n                  {title}\n                </h2>\n                <div className=\"focus:outline-none\" tabIndex={-1}>\n                  {children}\n                </div>\n              </div>\n            </motion.div>\n          </div>\n        </>\n      )}\n    </AnimatePresence>\n  );\n}\n\n// Accessible Tooltip\ninterface AccessibleTooltipProps {\n  content: string;\n  children: React.ReactNode;\n  placement?: 'top' | 'bottom' | 'left' | 'right';\n  delay?: number;\n}\n\nexport function AccessibleTooltip({\n  content,\n  children,\n  placement = 'top',\n  delay = 500,\n}: AccessibleTooltipProps) {\n  const [isVisible, setIsVisible] = useState(false);\n  const [isFocused, setIsFocused] = useState(false);\n  const timeoutRef = useRef<NodeJS.Timeout | null>(null);\n  const tooltipId = useRef(`tooltip-${Math.random().toString(36).substr(2, 9)}`);\n\n  const showTooltip = useCallback(() => {\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n    }\n    timeoutRef.current = setTimeout(() => {\n      setIsVisible(true);\n    }, delay);\n  }, [delay]);\n\n  const hideTooltip = useCallback(() => {\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n    }\n    setIsVisible(false);\n  }, []);\n\n  const placements = {\n    top: 'bottom-full left-1/2 transform -translate-x-1/2 mb-2',\n    bottom: 'top-full left-1/2 transform -translate-x-1/2 mt-2',\n    left: 'right-full top-1/2 transform -translate-y-1/2 mr-2',\n    right: 'left-full top-1/2 transform -translate-y-1/2 ml-2',\n  };\n\n  const arrows = {\n    top: 'top-full left-1/2 transform -translate-x-1/2 border-l-4 border-r-4 border-t-4 border-transparent border-t-gray-800',\n    bottom: 'bottom-full left-1/2 transform -translate-x-1/2 border-l-4 border-r-4 border-b-4 border-transparent border-b-gray-800',\n    left: 'left-full top-1/2 transform -translate-y-1/2 border-t-4 border-b-4 border-l-4 border-transparent border-l-gray-800',\n    right: 'right-full top-1/2 transform -translate-y-1/2 border-t-4 border-b-4 border-r-4 border-transparent border-r-gray-800',\n  };\n\n  return (\n    <div className=\"relative inline-block\">\n      <div\n        onMouseEnter={showTooltip}\n        onMouseLeave={hideTooltip}\n        onFocus={() => {\n          setIsFocused(true);\n          showTooltip();\n        }}\n        onBlur={() => {\n          setIsFocused(false);\n          hideTooltip();\n        }}\n        aria-describedby={isVisible ? tooltipId.current : undefined}\n      >\n        {children}\n      </div>\n      \n      <AnimatePresence>\n        {(isVisible || isFocused) && (\n          <div className={`absolute ${placements[placement]} z-50 pointer-events-none`}>\n            <motion.div\n              id={tooltipId.current}\n              role=\"tooltip\"\n              className=\"bg-gray-800 text-white text-sm px-3 py-2 rounded-lg shadow-lg whitespace-nowrap\"\n              initial={{ opacity: 0, scale: 0.8 }}\n              animate={{ opacity: 1, scale: 1 }}\n              exit={{ opacity: 0, scale: 0.8 }}\n              transition={{ duration: 0.2 }}\n            >\n              {content}\n              <div className={`absolute ${arrows[placement]} w-0 h-0`} />\n            </motion.div>\n          </div>\n        )}\n      </AnimatePresence>\n    </div>\n  );\n}\n\n// High Contrast Mode Toggle\nexport function HighContrastToggle() {\n  const [highContrast, setHighContrast] = useState(false);\n\n  useEffect(() => {\n    const saved = localStorage.getItem('highContrast');\n    if (saved === 'true') {\n      setHighContrast(true);\n      document.documentElement.classList.add('high-contrast');\n    }\n  }, []);\n\n  const toggleHighContrast = () => {\n    const newValue = !highContrast;\n    setHighContrast(newValue);\n    localStorage.setItem('highContrast', newValue.toString());\n    \n    if (newValue) {\n      document.documentElement.classList.add('high-contrast');\n    } else {\n      document.documentElement.classList.remove('high-contrast');\n    }\n  };\n\n  return (\n    <button\n      onClick={toggleHighContrast}\n      className=\"\n        flex items-center space-x-2 px-4 py-2 rounded-lg border-2\n        focus:outline-none focus:ring-4 focus:ring-primary-200\n        transition-all duration-200\n      \"\n      aria-label={`${highContrast ? 'Disable' : 'Enable'} high contrast mode`}\n      aria-pressed={highContrast}\n    >\n      {highContrast ? <EyeSlashIcon className=\"w-5 h-5\" /> : <EyeIcon className=\"w-5 h-5\" />}\n      <span>{highContrast ? 'Normal' : 'High'} Contrast</span>\n    </button>\n  );\n}\n\n// Font Size Controller\nexport function FontSizeController() {\n  const [fontSize, setFontSize] = useState(100);\n\n  useEffect(() => {\n    const saved = localStorage.getItem('fontSize');\n    if (saved) {\n      const size = parseInt(saved);\n      setFontSize(size);\n      document.documentElement.style.fontSize = `${size}%`;\n    }\n  }, []);\n\n  const changeFontSize = (delta: number) => {\n    const newSize = Math.max(75, Math.min(150, fontSize + delta));\n    setFontSize(newSize);\n    localStorage.setItem('fontSize', newSize.toString());\n    document.documentElement.style.fontSize = `${newSize}%`;\n  };\n\n  const resetFontSize = () => {\n    setFontSize(100);\n    localStorage.setItem('fontSize', '100');\n    document.documentElement.style.fontSize = '100%';\n  };\n\n  return (\n    <div className=\"flex items-center space-x-2\">\n      <button\n        onClick={() => changeFontSize(-12.5)}\n        disabled={fontSize <= 75}\n        className=\"\n          p-2 rounded-lg border-2 disabled:opacity-50 disabled:cursor-not-allowed\n          focus:outline-none focus:ring-4 focus:ring-primary-200\n          transition-all duration-200\n        \"\n        aria-label=\"Decrease font size\"\n      >\n        <MinusIcon className=\"w-4 h-4\" />\n      </button>\n      \n      <button\n        onClick={resetFontSize}\n        className=\"\n          px-3 py-2 rounded-lg border-2 text-sm font-medium\n          focus:outline-none focus:ring-4 focus:ring-primary-200\n          transition-all duration-200\n        \"\n        aria-label=\"Reset font size to normal\"\n      >\n        {fontSize}%\n      </button>\n      \n      <button\n        onClick={() => changeFontSize(12.5)}\n        disabled={fontSize >= 150}\n        className=\"\n          p-2 rounded-lg border-2 disabled:opacity-50 disabled:cursor-not-allowed\n          focus:outline-none focus:ring-4 focus:ring-primary-200\n          transition-all duration-200\n        \"\n        aria-label=\"Increase font size\"\n      >\n        <PlusIcon className=\"w-4 h-4\" />\n      </button>\n    </div>\n  );\n}\n\n// Screen Reader Announcements\ninterface ScreenReaderAnnouncementProps {\n  message: string;\n  priority?: 'polite' | 'assertive';\n  children?: React.ReactNode;\n}\n\nexport function ScreenReaderAnnouncement({\n  message,\n  priority = 'polite',\n  children,\n}: ScreenReaderAnnouncementProps) {\n  const [announcement, setAnnouncement] = useState('');\n\n  useEffect(() => {\n    if (message) {\n      setAnnouncement(message);\n      const timer = setTimeout(() => setAnnouncement(''), 1000);\n      return () => clearTimeout(timer);\n    }\n  }, [message]);\n\n  return (\n    <>\n      <div\n        role=\"status\"\n        aria-live={priority}\n        aria-atomic=\"true\"\n        className=\"sr-only\"\n      >\n        {announcement}\n      </div>\n      {children}\n    </>\n  );\n}\n\n// Back to Top Button\nexport function BackToTopButton() {\n  const [isVisible, setIsVisible] = useState(false);\n\n  useEffect(() => {\n    const toggleVisibility = () => {\n      if (window.pageYOffset > 300) {\n        setIsVisible(true);\n      } else {\n        setIsVisible(false);\n      }\n    };\n\n    window.addEventListener('scroll', toggleVisibility);\n    return () => window.removeEventListener('scroll', toggleVisibility);\n  }, []);\n\n  const scrollToTop = () => {\n    window.scrollTo({\n      top: 0,\n      behavior: 'smooth'\n    });\n  };\n\n  return (\n    <AnimatePresence>\n      {isVisible && (\n        <motion.button\n          className=\"\n            fixed bottom-6 right-6 z-50 w-12 h-12 bg-primary-600 text-white\n            rounded-full shadow-lg flex items-center justify-center\n            focus:outline-none focus:ring-4 focus:ring-primary-200\n            hover:bg-primary-700 transition-colors duration-200\n          \"\n          onClick={scrollToTop}\n          initial={{ opacity: 0, scale: 0.8 }}\n          animate={{ opacity: 1, scale: 1 }}\n          exit={{ opacity: 0, scale: 0.8 }}\n          whileHover={{ scale: 1.1 }}\n          whileTap={{ scale: 0.9 }}\n          aria-label=\"Back to top\"\n        >\n          <ArrowUpIcon className=\"w-5 h-5\" />\n        </motion.button>\n      )}\n    </AnimatePresence>\n  );\n}\n\n// Accessible Progress Bar\ninterface AccessibleProgressProps {\n  value: number;\n  max?: number;\n  label: string;\n  description?: string;\n  showPercentage?: boolean;\n  variant?: 'default' | 'success' | 'warning' | 'error';\n}\n\nexport function AccessibleProgress({\n  value,\n  max = 100,\n  label,\n  description,\n  showPercentage = true,\n  variant = 'default',\n}: AccessibleProgressProps) {\n  const percentage = Math.round((value / max) * 100);\n  const progressId = useRef(`progress-${Math.random().toString(36).substr(2, 9)}`);\n  \n  const variants = {\n    default: 'bg-primary-500',\n    success: 'bg-green-500',\n    warning: 'bg-orange-500',\n    error: 'bg-red-500',\n  };\n\n  return (\n    <div>\n      <div className=\"flex justify-between items-center mb-2\">\n        <label htmlFor={progressId.current} className=\"text-sm font-medium text-gray-700\">\n          {label}\n        </label>\n        {showPercentage && (\n          <span className=\"text-sm text-gray-500\" aria-hidden=\"true\">\n            {percentage}%\n          </span>\n        )}\n      </div>\n      \n      <div className=\"w-full bg-gray-200 rounded-full h-2 overflow-hidden\">\n        <motion.div\n          id={progressId.current}\n          className={`h-full ${variants[variant]} transition-all duration-500`}\n          role=\"progressbar\"\n          aria-valuenow={value}\n          aria-valuemin={0}\n          aria-valuemax={max}\n          aria-label={`${label}: ${percentage}% complete`}\n          aria-describedby={description ? `${progressId.current}-desc` : undefined}\n          initial={{ width: 0 }}\n          animate={{ width: `${percentage}%` }}\n          transition={{ duration: 0.8, ease: \"easeOut\" }}\n        />\n      </div>\n      \n      {description && (\n        <p\n          id={`${progressId.current}-desc`}\n          className=\"text-xs text-gray-500 mt-1\"\n        >\n          {description}\n        </p>\n      )}\n    </div>\n  );\n}\n\n// Accessibility Settings Panel\nexport function AccessibilityPanel() {\n  const [isOpen, setIsOpen] = useState(false);\n\n  return (\n    <>\n      <button\n        onClick={() => setIsOpen(true)}\n        className=\"\n          fixed top-4 right-4 z-40 p-3 bg-white border-2 border-gray-300 rounded-full shadow-lg\n          focus:outline-none focus:ring-4 focus:ring-primary-200\n          hover:bg-gray-50 transition-all duration-200\n        \"\n        aria-label=\"Open accessibility settings\"\n      >\n        <EyeIcon className=\"w-6 h-6\" />\n      </button>\n\n      <AccessibleModal\n        isOpen={isOpen}\n        onClose={() => setIsOpen(false)}\n        title=\"Accessibility Settings\"\n        size=\"md\"\n      >\n        <div className=\"space-y-6\">\n          <div>\n            <h3 className=\"text-lg font-semibold mb-3\">Visual Settings</h3>\n            <div className=\"space-y-4\">\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  Text Size\n                </label>\n                <FontSizeController />\n              </div>\n              \n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  Display Mode\n                </label>\n                <HighContrastToggle />\n              </div>\n            </div>\n          </div>\n          \n          <div className=\"pt-4 border-t border-gray-200\">\n            <p className=\"text-sm text-gray-600\">\n              These settings are saved locally and will persist across sessions.\n              For additional accessibility features, please refer to your device settings.\n            </p>\n          </div>\n          \n          <div className=\"flex justify-end\">\n            <button\n              onClick={() => setIsOpen(false)}\n              className=\"\n                px-4 py-2 bg-primary-600 text-white rounded-lg\n                focus:outline-none focus:ring-4 focus:ring-primary-200\n                hover:bg-primary-700 transition-colors duration-200\n              \"\n            >\n              Close\n            </button>\n          </div>\n        </div>\n      </AccessibleModal>\n    </>\n  );\n}"