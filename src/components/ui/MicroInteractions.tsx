'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport { motion, AnimatePresence, useAnimation } from 'framer-motion';\nimport { \n  CheckCircleIcon, \n  XMarkIcon, \n  ExclamationTriangleIcon, \n  InformationCircleIcon,\n  StarIcon,\n  HeartIcon,\n  SparklesIcon,\n  BoltIcon,\n} from '@heroicons/react/24/outline';\nimport { \n  CheckCircleIcon as CheckSolid,\n  StarIcon as StarSolid,\n  HeartIcon as HeartSolid,\n} from '@heroicons/react/24/solid';\n\n// Floating Action Button with Micro-interactions\ninterface FloatingActionButtonProps {\n  icon: React.ComponentType<any>;\n  label: string;\n  onClick: () => void;\n  variant?: 'primary' | 'success' | 'warning' | 'danger';\n  size?: 'sm' | 'md' | 'lg';\n  position?: 'bottom-right' | 'bottom-left' | 'top-right' | 'top-left';\n  showTooltip?: boolean;\n  badge?: string | number;\n}\n\nexport function FloatingActionButton({\n  icon: Icon,\n  label,\n  onClick,\n  variant = 'primary',\n  size = 'md',\n  position = 'bottom-right',\n  showTooltip = true,\n  badge,\n}: FloatingActionButtonProps) {\n  const [isHovered, setIsHovered] = useState(false);\n  const [isPressed, setIsPressed] = useState(false);\n\n  const variants = {\n    primary: 'from-primary-500 to-primary-600 hover:from-primary-600 hover:to-primary-700',\n    success: 'from-green-500 to-green-600 hover:from-green-600 hover:to-green-700',\n    warning: 'from-orange-500 to-orange-600 hover:from-orange-600 hover:to-orange-700',\n    danger: 'from-red-500 to-red-600 hover:from-red-600 hover:to-red-700',\n  };\n\n  const sizes = {\n    sm: 'w-12 h-12',\n    md: 'w-14 h-14',\n    lg: 'w-16 h-16',\n  };\n\n  const iconSizes = {\n    sm: 'w-5 h-5',\n    md: 'w-6 h-6',\n    lg: 'w-7 h-7',\n  };\n\n  const positions = {\n    'bottom-right': 'bottom-6 right-6',\n    'bottom-left': 'bottom-6 left-6',\n    'top-right': 'top-6 right-6',\n    'top-left': 'top-6 left-6',\n  };\n\n  return (\n    <div className={`fixed z-50 ${positions[position]}`}>\n      <motion.button\n        className={`\n          ${sizes[size]} bg-gradient-to-br ${variants[variant]}\n          rounded-full shadow-lg text-white flex items-center justify-center\n          relative overflow-hidden\n        `}\n        whileHover={{ \n          scale: 1.05, \n          boxShadow: \"0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04)\"\n        }}\n        whileTap={{ \n          scale: 0.95,\n          boxShadow: \"0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)\"\n        }}\n        onClick={onClick}\n        onHoverStart={() => setIsHovered(true)}\n        onHoverEnd={() => setIsHovered(false)}\n        onTapStart={() => setIsPressed(true)}\n        onTapCancel={() => setIsPressed(false)}\n        aria-label={label}\n      >\n        {/* Ripple effect */}\n        <AnimatePresence>\n          {isPressed && (\n            <motion.div\n              className=\"absolute inset-0 bg-white/20 rounded-full\"\n              initial={{ scale: 0 }}\n              animate={{ scale: 2 }}\n              exit={{ opacity: 0 }}\n              transition={{ duration: 0.4, ease: \"easeOut\" }}\n            />\n          )}\n        </AnimatePresence>\n\n        <motion.div\n          animate={{ \n            rotate: isHovered ? 15 : 0,\n            scale: isPressed ? 0.8 : 1\n          }}\n          transition={{ duration: 0.2 }}\n        >\n          <Icon className={iconSizes[size]} />\n        </motion.div>\n\n        {/* Badge */}\n        {badge && (\n          <motion.div\n            className=\"absolute -top-1 -right-1 bg-red-500 text-white text-xs font-bold rounded-full min-w-[1.25rem] h-5 flex items-center justify-center px-1\"\n            initial={{ scale: 0 }}\n            animate={{ scale: 1 }}\n            whileHover={{ scale: 1.1 }}\n          >\n            {badge}\n          </motion.div>\n        )}\n      </motion.button>\n\n      {/* Tooltip */}\n      <AnimatePresence>\n        {showTooltip && isHovered && (\n          <motion.div\n            className=\"absolute bottom-full mb-2 left-1/2 transform -translate-x-1/2 bg-gray-800 text-white text-sm px-3 py-2 rounded-lg whitespace-nowrap shadow-lg\"\n            initial={{ opacity: 0, y: 10, scale: 0.8 }}\n            animate={{ opacity: 1, y: 0, scale: 1 }}\n            exit={{ opacity: 0, y: 10, scale: 0.8 }}\n            transition={{ duration: 0.2 }}\n          >\n            {label}\n            <div className=\"absolute top-full left-1/2 transform -translate-x-1/2 w-0 h-0 border-l-4 border-r-4 border-t-4 border-transparent border-t-gray-800\" />\n          </motion.div>\n        )}\n      </AnimatePresence>\n    </div>\n  );\n}\n\n// Toast Notification System\ninterface ToastProps {\n  id: string;\n  type: 'success' | 'error' | 'warning' | 'info';\n  title: string;\n  message?: string;\n  duration?: number;\n  onDismiss: (id: string) => void;\n  action?: {\n    label: string;\n    onClick: () => void;\n  };\n}\n\nexport function Toast({ id, type, title, message, duration = 5000, onDismiss, action }: ToastProps) {\n  const controls = useAnimation();\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      onDismiss(id);\n    }, duration);\n\n    return () => clearTimeout(timer);\n  }, [id, duration, onDismiss]);\n\n  const configs = {\n    success: {\n      icon: CheckSolid,\n      bgColor: 'bg-green-50 border-green-200',\n      iconColor: 'text-green-600',\n      textColor: 'text-green-900',\n    },\n    error: {\n      icon: XMarkIcon,\n      bgColor: 'bg-red-50 border-red-200',\n      iconColor: 'text-red-600',\n      textColor: 'text-red-900',\n    },\n    warning: {\n      icon: ExclamationTriangleIcon,\n      bgColor: 'bg-orange-50 border-orange-200',\n      iconColor: 'text-orange-600',\n      textColor: 'text-orange-900',\n    },\n    info: {\n      icon: InformationCircleIcon,\n      bgColor: 'bg-blue-50 border-blue-200',\n      iconColor: 'text-blue-600',\n      textColor: 'text-blue-900',\n    },\n  };\n\n  const config = configs[type];\n  const Icon = config.icon;\n\n  return (\n    <motion.div\n      className={`\n        max-w-sm w-full ${config.bgColor} border rounded-xl p-4 shadow-lg backdrop-blur-sm\n        pointer-events-auto cursor-pointer\n      `}\n      initial={{ opacity: 0, y: 50, scale: 0.9 }}\n      animate={{ opacity: 1, y: 0, scale: 1 }}\n      exit={{ opacity: 0, y: -50, scale: 0.9, transition: { duration: 0.2 } }}\n      whileHover={{ scale: 1.02 }}\n      whileTap={{ scale: 0.98 }}\n      layout\n    >\n      <div className=\"flex items-start\">\n        <motion.div\n          className={`flex-shrink-0 ${config.iconColor}`}\n          initial={{ scale: 0, rotate: -90 }}\n          animate={{ scale: 1, rotate: 0 }}\n          transition={{ delay: 0.2, type: \"spring\", stiffness: 200 }}\n        >\n          <Icon className=\"w-6 h-6\" />\n        </motion.div>\n        \n        <div className=\"ml-3 flex-1\">\n          <motion.p \n            className={`font-semibold ${config.textColor}`}\n            initial={{ opacity: 0, x: -10 }}\n            animate={{ opacity: 1, x: 0 }}\n            transition={{ delay: 0.3 }}\n          >\n            {title}\n          </motion.p>\n          {message && (\n            <motion.p \n              className={`mt-1 text-sm ${config.textColor} opacity-80`}\n              initial={{ opacity: 0, x: -10 }}\n              animate={{ opacity: 0.8, x: 0 }}\n              transition={{ delay: 0.4 }}\n            >\n              {message}\n            </motion.p>\n          )}\n          \n          {action && (\n            <motion.button\n              className={`mt-2 text-sm font-medium ${config.iconColor} hover:underline`}\n              onClick={action.onClick}\n              initial={{ opacity: 0 }}\n              animate={{ opacity: 1 }}\n              transition={{ delay: 0.5 }}\n              whileHover={{ scale: 1.05 }}\n              whileTap={{ scale: 0.95 }}\n            >\n              {action.label}\n            </motion.button>\n          )}\n        </div>\n        \n        <motion.button\n          className={`ml-4 ${config.iconColor} opacity-60 hover:opacity-100`}\n          onClick={() => onDismiss(id)}\n          whileHover={{ scale: 1.1, rotate: 90 }}\n          whileTap={{ scale: 0.9 }}\n        >\n          <XMarkIcon className=\"w-5 h-5\" />\n        </motion.button>\n      </div>\n    </motion.div>\n  );\n}\n\n// Loading Button with Micro-interactions\ninterface LoadingButtonProps {\n  children: React.ReactNode;\n  loading: boolean;\n  onClick: () => void;\n  variant?: 'primary' | 'secondary' | 'success';\n  size?: 'sm' | 'md' | 'lg';\n  disabled?: boolean;\n  successIcon?: React.ComponentType<any>;\n  className?: string;\n}\n\nexport function LoadingButton({\n  children,\n  loading,\n  onClick,\n  variant = 'primary',\n  size = 'md',\n  disabled = false,\n  successIcon: SuccessIcon = CheckSolid,\n  className = '',\n}: LoadingButtonProps) {\n  const [success, setSuccess] = useState(false);\n\n  const handleClick = async () => {\n    if (loading || disabled) return;\n    \n    try {\n      await onClick();\n      setSuccess(true);\n      setTimeout(() => setSuccess(false), 2000);\n    } catch (error) {\n      // Handle error if needed\n    }\n  };\n\n  const variants = {\n    primary: 'bg-gradient-to-r from-primary-500 to-primary-600 hover:from-primary-600 hover:to-primary-700 text-white',\n    secondary: 'bg-surface-secondary text-text-primary border border-border-medium hover:bg-surface-tertiary',\n    success: 'bg-gradient-to-r from-green-500 to-green-600 hover:from-green-600 hover:to-green-700 text-white',\n  };\n\n  const sizes = {\n    sm: 'px-4 py-2 text-sm',\n    md: 'px-6 py-3 text-base',\n    lg: 'px-8 py-4 text-lg',\n  };\n\n  return (\n    <motion.button\n      className={`\n        relative ${variants[variant]} ${sizes[size]} rounded-xl font-semibold\n        transition-all duration-200 overflow-hidden disabled:opacity-50\n        ${className}\n      `}\n      onClick={handleClick}\n      disabled={loading || disabled || success}\n      whileHover={!loading && !disabled ? { scale: 1.02 } : {}}\n      whileTap={!loading && !disabled ? { scale: 0.98 } : {}}\n    >\n      <AnimatePresence mode=\"wait\">\n        {loading ? (\n          <motion.div\n            key=\"loading\"\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            exit={{ opacity: 0 }}\n            className=\"flex items-center justify-center\"\n          >\n            <motion.div\n              className=\"w-5 h-5 border-2 border-current border-t-transparent rounded-full mr-2\"\n              animate={{ rotate: 360 }}\n              transition={{ duration: 1, repeat: Infinity, ease: \"linear\" }}\n            />\n            Loading...\n          </motion.div>\n        ) : success ? (\n          <motion.div\n            key=\"success\"\n            initial={{ opacity: 0, scale: 0.5 }}\n            animate={{ opacity: 1, scale: 1 }}\n            exit={{ opacity: 0, scale: 0.5 }}\n            className=\"flex items-center justify-center\"\n          >\n            <motion.div\n              initial={{ scale: 0, rotate: -90 }}\n              animate={{ scale: 1, rotate: 0 }}\n              transition={{ type: \"spring\", stiffness: 200, delay: 0.1 }}\n            >\n              <SuccessIcon className=\"w-5 h-5 mr-2\" />\n            </motion.div>\n            Success!\n          </motion.div>\n        ) : (\n          <motion.div\n            key=\"default\"\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            exit={{ opacity: 0 }}\n          >\n            {children}\n          </motion.div>\n        )}\n      </AnimatePresence>\n    </motion.button>\n  );\n}\n\n// Interactive Heart/Like Button\ninterface LikeButtonProps {\n  liked: boolean;\n  onToggle: () => void;\n  count?: number;\n  size?: 'sm' | 'md' | 'lg';\n  showCount?: boolean;\n}\n\nexport function LikeButton({ liked, onToggle, count, size = 'md', showCount = true }: LikeButtonProps) {\n  const [isAnimating, setIsAnimating] = useState(false);\n  const [particles, setParticles] = useState<Array<{ id: number; x: number; y: number }>>([]);\n\n  const sizes = {\n    sm: 'w-6 h-6',\n    md: 'w-8 h-8',\n    lg: 'w-10 h-10',\n  };\n\n  const handleClick = () => {\n    setIsAnimating(true);\n    onToggle();\n    \n    if (!liked) {\n      // Create particle effect\n      const newParticles = Array.from({ length: 6 }, (_, i) => ({\n        id: i,\n        x: Math.random() * 40 - 20,\n        y: Math.random() * 40 - 20,\n      }));\n      setParticles(newParticles);\n      \n      setTimeout(() => setParticles([]), 1000);\n    }\n    \n    setTimeout(() => setIsAnimating(false), 600);\n  };\n\n  return (\n    <div className=\"relative inline-flex items-center\">\n      <motion.button\n        className={`\n          relative ${sizes[size]} flex items-center justify-center rounded-full\n          ${liked ? 'text-red-500' : 'text-gray-400 hover:text-red-400'}\n          transition-colors duration-200\n        `}\n        onClick={handleClick}\n        whileHover={{ scale: 1.1 }}\n        whileTap={{ scale: 0.9 }}\n      >\n        <motion.div\n          animate={{\n            scale: isAnimating ? [1, 1.3, 1] : 1,\n            rotate: isAnimating ? [0, 15, -15, 0] : 0,\n          }}\n          transition={{ duration: 0.6, ease: \"easeInOut\" }}\n        >\n          {liked ? (\n            <HeartSolid className={sizes[size]} />\n          ) : (\n            <HeartIcon className={sizes[size]} />\n          )}\n        </motion.div>\n        \n        {/* Particles */}\n        <AnimatePresence>\n          {particles.map((particle) => (\n            <motion.div\n              key={particle.id}\n              className=\"absolute w-1 h-1 bg-red-500 rounded-full\"\n              initial={{ scale: 0, x: 0, y: 0 }}\n              animate={{ \n                scale: [0, 1, 0], \n                x: particle.x, \n                y: particle.y,\n                opacity: [1, 1, 0]\n              }}\n              exit={{ opacity: 0 }}\n              transition={{ duration: 1, ease: \"easeOut\" }}\n            />\n          ))}\n        </AnimatePresence>\n      </motion.button>\n      \n      {showCount && count !== undefined && (\n        <motion.span\n          className=\"ml-2 text-sm font-medium text-gray-600\"\n          animate={{ scale: isAnimating && !liked ? [1, 1.2, 1] : 1 }}\n          transition={{ duration: 0.3 }}\n        >\n          {count}\n        </motion.span>\n      )}\n    </div>\n  );\n}\n\n// Expandable Card with Micro-interactions\ninterface ExpandableCardProps {\n  title: string;\n  children: React.ReactNode;\n  defaultExpanded?: boolean;\n  variant?: 'default' | 'elevated' | 'outlined';\n}\n\nexport function ExpandableCard({ title, children, defaultExpanded = false, variant = 'default' }: ExpandableCardProps) {\n  const [isExpanded, setIsExpanded] = useState(defaultExpanded);\n  const [isHovered, setIsHovered] = useState(false);\n\n  const variants = {\n    default: 'bg-surface-elevated border border-border-light',\n    elevated: 'bg-surface-elevated border border-border-light shadow-lg',\n    outlined: 'bg-transparent border-2 border-border-medium',\n  };\n\n  return (\n    <motion.div\n      className={`rounded-2xl overflow-hidden transition-all duration-200 ${variants[variant]}`}\n      whileHover={{ scale: 1.01 }}\n      onHoverStart={() => setIsHovered(true)}\n      onHoverEnd={() => setIsHovered(false)}\n    >\n      <motion.button\n        className=\"w-full p-6 text-left flex items-center justify-between hover:bg-surface-secondary/50 transition-colors\"\n        onClick={() => setIsExpanded(!isExpanded)}\n        whileTap={{ scale: 0.99 }}\n      >\n        <h3 className=\"font-semibold text-text-primary\">{title}</h3>\n        <motion.div\n          animate={{ rotate: isExpanded ? 180 : 0 }}\n          transition={{ duration: 0.3 }}\n        >\n          <SparklesIcon className=\"w-5 h-5 text-text-secondary\" />\n        </motion.div>\n      </motion.button>\n      \n      <AnimatePresence initial={false}>\n        {isExpanded && (\n          <motion.div\n            key=\"content\"\n            initial=\"collapsed\"\n            animate=\"open\"\n            exit=\"collapsed\"\n            variants={{\n              open: { opacity: 1, height: \"auto\" },\n              collapsed: { opacity: 0, height: 0 }\n            }}\n            transition={{ duration: 0.3, ease: [0.04, 0.62, 0.23, 0.98] }}\n          >\n            <motion.div \n              className=\"px-6 pb-6 border-t border-border-light\"\n              initial={{ opacity: 0, y: -10 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ delay: 0.1 }}\n            >\n              {children}\n            </motion.div>\n          </motion.div>\n        )}\n      </AnimatePresence>\n    </motion.div>\n  );\n}"